        -:    0:Source:pipe.c
        -:    0:Graph:pipe.gcno
        -:    0:Data:pipe.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/*
        -:    3:	pipe.c
        -:    4:*/
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:time_t tempo0, tempo1, tempo2, tempo3;
        -:   11:
        -:   12:#define RES_F 	resF = (resF*(float)i + (float)i) / (((float)i)+2.); \
        -:   13:		resF = (resF*(float)j + (float)j) / (((float)j)+2.)
        -:   14:
        -:   15:#define RES_I 	resI = (resI*(2*i+j) + i*17 + 5*(i%(j+43)) ) / (i+1); \
        -:   16:		resI = (resI*j + (j+i+5)*13) / (j/3+1); \
        -:   17:		resI = (resI*(3*i+j) + i*19 + 5*(i%(j+47)) ) / (i+1); \
        -:   18:                resI = (resI*j + (j+i+3)*11) / (j/5+1); \
        -:   19:
        -:   20:
        -:   21:#define MAX_J 2000
        -:   22:#ifndef MAX_I
        -:   23:#define MAX_I 30000
        -:   24:#endif
        -:   25:
        1:   26:void *CalcInt(void *in)
        -:   27:{
        -:   28:  int i, j;
        1:   29:  int resI = 1;
     2001:   30:  for( j=0 ; j<MAX_J ; j++ )
    18000:   31:  for( i=0 ; i<MAX_I ; i++ )
        -:   32:  {
    16000:   33:      RES_I; RES_I;
    16000:   34:      RES_I; RES_I;
    16000:   35:      RES_I; RES_I;
    16000:   36:      RES_I; RES_I;
    16000:   37:      RES_I; RES_I;
        -:   38:  }
        1:   39:  time(&tempo1);
        1:   40:  printf("resI = %d\n", resI);
        1:   41:  return NULL;
        -:   42:}
        -:   43:
        1:   44:void *CalcFloat(void *in)
        -:   45:{
        -:   46:  int i, j;
        1:   47:  float resF = 1.;
     2001:   48:  for( j=0 ; j<MAX_J ; j++ )
    18000:   49:  for( i=0 ; i<MAX_I ; i++ )
        -:   50:  {
    16000:   51:    RES_F;  RES_F;
    16000:   52:    RES_F;  RES_F;
    16000:   53:    RES_F;  RES_F;
    16000:   54:    RES_F;  RES_F;
    16000:   55:    RES_F;  RES_F;
        -:   56:  }
        1:   57:  time(&tempo2);
        1:   58:  printf("resF = %f\n", resF);
        1:   59:  return NULL;
        -:   60:}
        -:   61:
        1:   62:void *CalcAll(void *in)
        -:   63:{
        -:   64:  int i, j;
        1:   65:  float resF = 1.;
        1:   66:  int resI = 1;
     2001:   67:  for( j=0 ; j<MAX_J ; j++ )
    18000:   68:  for( i=0 ; i<MAX_I ; i++ )
        -:   69:  {
    16000:   70:    RES_F;  RES_F;
    16000:   71:    RES_F;  RES_F;
    16000:   72:    RES_F;  RES_F;
    16000:   73:    RES_F;  RES_F;
    16000:   74:    RES_F;  RES_F;
        -:   75:
    16000:   76:    RES_I; RES_I;
    16000:   77:    RES_I; RES_I;
    16000:   78:    RES_I; RES_I;
    16000:   79:    RES_I; RES_I;
    16000:   80:    RES_I; RES_I;
        -:   81:  }
        1:   82:  time(&tempo2);  printf("resI = %d, resF=%f\n", resI, resF);
        1:   83:  return NULL;
        -:   84:}
        -:   85:
        1:   86:void *CalcAll2(void *in)
        -:   87:{
        -:   88:  int i, j;
        1:   89:  float resF = 1.;
        1:   90:  int resI = 1;
     2001:   91:  for( j=0 ; j<MAX_J ; j++ )
    18000:   92:  for( i=0 ; i<MAX_I ; i++ )
        -:   93:  {
    16000:   94:    RES_I; RES_F;
    16000:   95:    RES_I; RES_F;
    16000:   96:    RES_I; RES_F;
    16000:   97:    RES_I; RES_F;
    16000:   98:    RES_I; RES_F;
        -:   99:
    16000:  100:    RES_I; RES_F;
    16000:  101:    RES_I; RES_F;
    16000:  102:    RES_I; RES_F;
    16000:  103:    RES_I; RES_F;
    16000:  104:    RES_I; RES_F;
        -:  105:  }
        1:  106:  time(&tempo2);
        1:  107:  printf("res2 = %d, %f\n", resI, resF);
        1:  108:  return NULL;
        -:  109:}
        -:  110:
        1:  111:int main()
        -:  112:{
        1:  113:  printf("\n# Em separado\n");
        1:  114:  time(&tempo0);
        1:  115:  CalcInt(NULL);
        1:  116:  time(&tempo1);
        1:  117:  CalcFloat(NULL);
        1:  118:  time(&tempo2);
        1:  119:  printf("CalcInt: %ld segs,  CalcFloat: %ld segs, Tempo_Total: %ld segs\n", tempo1-tempo0, tempo2-tempo1, tempo2-tempo0);
        -:  120:
        1:  121:  printf("\n# Em conjunto, grupos de 10\n");
        1:  122:  time(&tempo0);
        1:  123:  CalcAll(NULL);
        1:  124:  time(&tempo3);
        1:  125:  printf("Tempo: %ld segs\n", tempo3-tempo0);
        -:  126:
        1:  127:  printf("\n# Em conjunto, grupos de 1\n");
        1:  128:  time(&tempo0);
        1:  129:  CalcAll2(NULL);
        1:  130:  time(&tempo3);
        1:  131:  printf("Tempo: %ld segs\n", tempo3-tempo0);
        -:  132:
        -:  133:}
