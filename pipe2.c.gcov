        -:    0:Source:pipe2.c
        -:    0:Graph:pipe2.gcno
        -:    0:Data:pipe2.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/*
        -:    3:	pipe2.c
        -:    4:*/
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:time_t tempo0, tempo1, tempo2, tempo3;
        -:   11:
        -:   12:
        -:   13:#define RES_I1	resI1 = (resI1*i + i + 5) / (i+1); \
        -:   14:		resI1 = (resI1*j + j + 5) / (j/3+1)
        -:   15:
        -:   16:#define RES_I2  resI2 = (resI2*i + i + 5) / (i+1); \
        -:   17:                resI2 = (resI2*j + j + 5) / (j/3+1)
        -:   18:
        -:   19:
        -:   20:#define MAX_J 2000
        -:   21:#ifndef MAX_I
        -:   22:#define MAX_I 30000
        -:   23:#endif
        -:   24:
        1:   25:void *CalcInt1(void *in)
        -:   26:{
        -:   27:  int i, j;
        1:   28:  int resI1 = 1;
     2001:   29:  for( j=0 ; j<MAX_J ; j++ )
    18000:   30:  for( i=0 ; i<MAX_I ; i++ )
        -:   31:  {
    16000:   32:      RES_I1; RES_I1;
    16000:   33:      RES_I1; RES_I1;
    16000:   34:      RES_I1; RES_I1;
    16000:   35:      RES_I1; RES_I1;
    16000:   36:      RES_I1; RES_I1;
        -:   37:  }
        1:   38:  printf("resI1 = %d\n", resI1);
        1:   39:  return NULL;
        -:   40:}
        -:   41:
        1:   42:void *CalcInt2(void *in)
        -:   43:{
        -:   44:  int i, j;
        1:   45:  int resI2 = 1;
     2001:   46:  for( j=0 ; j<MAX_J ; j++ )
    18000:   47:  for( i=0 ; i<MAX_I ; i++ )
        -:   48:  {
    16000:   49:    RES_I2;  RES_I2;
    16000:   50:    RES_I2;  RES_I2;
    16000:   51:    RES_I2;  RES_I2;
    16000:   52:    RES_I2;  RES_I2;
    16000:   53:    RES_I2;  RES_I2;
        -:   54:  }
        1:   55:  printf("resI2 = %d\n", resI2);
        1:   56:  return NULL;
        -:   57:
        -:   58:}
        -:   59:
        -:   60:// Em conjunto, grupos de 10
        1:   61:void *CalcAll(void *in)
        -:   62:{
        -:   63:  int i, j;
        1:   64:  int resI1 = 1;
        1:   65:  int resI2 = 1;
     2001:   66:  for( j=0 ; j<MAX_J ; j++ )
    18000:   67:  for( i=0 ; i<MAX_I ; i++ )
        -:   68:  {
    16000:   69:    RES_I2;  RES_I2;
    16000:   70:    RES_I2;  RES_I2;
    16000:   71:    RES_I2;  RES_I2;
    16000:   72:    RES_I2;  RES_I2;
    16000:   73:    RES_I2;  RES_I2;
        -:   74:
    16000:   75:    RES_I1; RES_I1;
    16000:   76:    RES_I1; RES_I1;
    16000:   77:    RES_I1; RES_I1;
    16000:   78:    RES_I1; RES_I1;
    16000:   79:    RES_I1; RES_I1;
        -:   80:  }
        1:   81:  printf("resI1= %d, resI2=%d\n", resI1, resI2);
        1:   82:  return NULL;
        -:   83:
        -:   84:}
        -:   85:
        -:   86:// Em conjunto, grupos de 1
        1:   87:void *CalcAll2(void *in)
        -:   88:{
        -:   89:  int i, j;
        1:   90:  int resI1 = 1;
        1:   91:  int resI2 = 1;
     2001:   92:  for( j=0 ; j<MAX_J ; j++ )
    18000:   93:  for( i=0 ; i<MAX_I ; i++ )
        -:   94:  {
    16000:   95:    RES_I1; RES_I2;
    16000:   96:    RES_I1; RES_I2;
    16000:   97:    RES_I1; RES_I2;
    16000:   98:    RES_I1; RES_I2;
    16000:   99:    RES_I1; RES_I2;
        -:  100:
    16000:  101:    RES_I1; RES_I2;
    16000:  102:    RES_I1; RES_I2;
    16000:  103:    RES_I1; RES_I2;
    16000:  104:    RES_I1; RES_I2;
    16000:  105:    RES_I1; RES_I2;
        -:  106:  }
        1:  107:  printf("resI1= %d, resI2=%d\n", resI1, resI2);
        1:  108:  return NULL;
        -:  109:}
        -:  110:
        1:  111:int main()
        -:  112:{
        1:  113:  printf("\n# Em separado\n");
        1:  114:  time(&tempo0);
        1:  115:  CalcInt1(NULL);
        1:  116:  time(&tempo1);
        1:  117:  CalcInt2(NULL);
        1:  118:  time(&tempo2);
        1:  119:  printf("CalcInt1: %ld segs,  CalcInt2: %ld segs, Tempo_Total: %ld segs\n", tempo1-tempo0, tempo2-tempo1, tempo2-tempo0);
        -:  120:
        1:  121:  printf("\n# Em conjunto, grupos de 10\n");
        1:  122:  time(&tempo0);
        1:  123:  CalcAll(NULL);
        1:  124:  time(&tempo3);
        1:  125:  printf("Tempo: %ld segs\n", tempo3-tempo0);
        -:  126:
        1:  127:  printf("\n# Em conjunto, grupos de 1\n");
        1:  128:  time(&tempo0);
        1:  129:  CalcAll2(NULL);
        1:  130:  time(&tempo3);
        1:  131:  printf("Tempo: %ld segs\n", tempo3-tempo0);
        1:  132:  return 0;
        -:  133:}
